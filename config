;; -*- mode: lisp; -*-

(in-package #:stumpwm-user)

(message "Loading ~s" *load-pathname*)

;; Custom package, to now "interfere" with stumpwm's package.
(defpackage #:stumpwmrc
  (:use #:cl #:stumpwm))

(in-package #:stumpwmrc)

;; Change the default package when evaluating using Prefix-:
(setf *default-package* (find-package '#:stumpwmrc))


;;; Configuring the prefix key

(defparameter +menu-key+
  #-freebsd "Menu"
  #+freebsd "XF86MenuKB"
  "Variable that contains the key designator for the \"menu key\".")

(defun menu-key (&optional control-string)
  "Helper to get variations of the menu key."
  (if control-string
      (kbd (format nil control-string +menu-key+))
      (kbd +menu-key+)))

;; Prefix key
(set-prefix-key (menu-key))

;; Use "Shift-menu" to send the prefix key (menu)
(define-key *top-map* (menu-key "S-~A") "send-escape")


;;; Configuring behaviours

;; Make the focus follow the mouse.
(setf *mouse-focus-policy* :sloppy)

;; Don't jump between groups when switching apps
(setf *run-or-raise-all-groups* nil)

;; Don't bring windows from another screen into the current one
;; ^^^ NOT TESTED, I'm on my laptop ATM.
(setf *run-or-raise-all-screens* nil)


;;; Loading other files

(defun load-config (name)
  (load (merge-pathnames (format nil "~A.lisp" name) *load-pathname*)))

(defun load-config* (&rest names)
  (mapcar #'load-config names))

(load-config* "utils"
              "defapplication"
              "audio"
              "aesthetic"
              ;; I'm running freebsd only on my laptop ATM
              #+freebsd "laptop"
              "modeline"
              "swank"
              "rofi")


;;; Common applications

;; Commonly used applications
(defapplication firefox :bind (:root "w") :class "firefox")
(defapplication firefox :bind (:root "W") :newp t)
(define-key *top-map* (kbd "KP_Home") "firefox") ;; KP_7

(defapplication emacs :bind (:root "E") :newp t)
(defapplication emacsclient :args "-c" :bind (:root "C-e"))

;; (defapplication alacritty :bind (:root "t"))
;; (defapplication alacritty :bind (:root "T") :newp t)
(defapplication kitty :bind (:root "t") :class "kitty")
(defapplication kitty :bind (:root "T") :newp t)
(define-key *top-map* (kbd "KP_Left") "emacs")

(defapplication anki :class "Anki" :bind (:root "a"))
;; (defapplication vlc :class "vlc" :bind (:root "v"))
(defapplication code :bind (:root "v"))
(define-key *top-map* (kbd "KP_Begin") "code")

(defapplication nautilus :bind (:top "s-e"))
(defapplication nautilus :bind (:top "s-E") :newp t)

;; TODO See *numpad-map*
(defapplication teams :bind (:top "KP_Insert") :class "teams")

(defapplication keepassxc :bind (:top "KP_Up")) ;; KP_8

;; KP_9 is snippets


;;; Key Bindings

;; Take a screenshot
(defcommand screenshot () ()
  (run-shell-command "flameshot gui"))
(define-key *top-map* (kbd "SunPrint_Screen") "screenshot")

;; Open an xterm window with the network-manager UI opened.
(defcommand network-manager () ()
  (run-commands "exec xterm -e nmtui"))
(define-key *root-map* (kbd "c") "network-manager")

;; Screen Lock
(defcommand lock () ()
  (run-commands "exec xlock"))
(define-key *top-map* (kbd "s-l") "lock")

;; Suspend
(defcommand suspend (confirmed-p)
  ((:y-or-n "About to suspend (without locking). U sure? "))
  (when confirmed-p
    (run-commands "exec systemctl suspend")))

;; Lock & Suspend
(defcommand lock-suspend (confirmed-p)
  ((:y-or-n "About to suspend (and lock). U sure? "))
  (when confirmed-p
    (run-commands
     "lock"
     "exec systemctl suspend")))

;; Shutdown
(defcommand shutdown (confirmed-p)
  ((:y-or-n "About to shutdown. U sure? "))
  (when confirmed-p
    (run-commands "exec systemctl poweroff")))

(defcommand reboot (confirmed-p)
  ((:y-or-n "About to reboot. U sure? "))
  (when confirmed-p
    (run-commands "exec systemctl reboot")))

;; move windows around with the "super" key
(define-key *top-map* (kbd "s-Right") "move-window right")
(define-key *top-map* (kbd "s-Left") "move-window left")
(define-key *top-map* (kbd "s-Up") "move-window up")
(define-key *top-map* (kbd "s-Down") "move-window down")

;; move the focus around with the "super" key
(define-key *top-map* (kbd "s-h") "move-focus left")
(define-key *top-map* (kbd "s-j") "move-focus down")
(define-key *top-map* (kbd "s-k") "move-focus up")
(define-key *top-map* (kbd "s-l") "move-focus right")

;; split and "maximize" windows with the "super" key
(define-key *top-map* (kbd "s-s") "vsplit")
(define-key *top-map* (kbd "s-v") "hsplit")
(define-key *top-map* (kbd "s-o") "only")

;; pull windows with the "super" key
(define-key *top-map* (kbd "s-n") "pull-hidden-next")
(define-key *top-map* (kbd "s-p") "pull-hidden-previous")
(define-key *top-map* (kbd "M-Tab") "pull-hidden-next")
(define-key *top-map*
    (stumpwm::make-key :meta t :keysym (stumpwm::stumpwm-name->keysym "ISO_Left_Tab"))
  "pull-hidden-previous")


;;; Fixes

;; Fix issues with scrolling
(setf (getenv "GDK_CORE_DEVICE_EVENTS") "1")


;;; Start-up

;; Start emacs, so that emacsclient runs correctly
(save-frame-excursion
 (run-commands "emacs"))

(mapcar #'(lambda (args)
            (destructuring-bind (group-name &rest commands)
                (if (listp args) args (list args))
              (gnewbg group-name)
              (when commands
                (save-frame-excursion
                 (gselect group-name)
                 ;; (sleep 1)
                 (apply #'run-commands commands)
                 ;; (sleep 1)
                 (gother)))))
        '("music" "chat" ("workflow"
                          ;; If I run emacsclient here, the window is
                          ;; not created in the right group, but I
                          ;; manually run the command while I'm the
                          ;; right group, it works.
                          ;; "emacsclient"
                          ;; "gmove"
                          ;; ALSO, the command emacsclient is not idempotent (I can't reload the config safely)
                          )))


;; TODO use *initializing* instead
(defvar *startup-done-p* nil
  "Use to determine if the commands ran at startup already ran or not")

;; on startup, open a terminal with at terminal multiplexer
(unless *startup-done-p*
  (ignore-errors
   ;; I now start applications with [dex](https://github.com/jceb/dex)
   ;; (run-or-raise "kitty tmux" '(:class "kitty"))
   ;; (run-or-raise "alacritty --command tmux" '(:class "Alacritty"))

   ;; Run xrandr script if it exists
   (let ((xrandr-script (merge-pathnames "xrandr" (user-homedir-pathname))))
     (when (probe-file xrandr-script)
       (run-shell-command (namestring xrandr-script))
       (sleep 1))))
  (setf *startup-done-p* t))


;;; Done!

(message "~s loaded" *load-pathname*)
