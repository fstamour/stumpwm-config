;; -*- mode: lisp; -*-

(in-package #:stumpwm-user)

(message "Loading ~s" *load-pathname*)

;; Custom package, to now "interfere" with stumpwm's package.
(defpackage #:stumpwmrc
  (:use #:cl #:stumpwm))

(in-package #:stumpwmrc)

;; Change the default package when evaluating using Prefix-:
(setf *default-package* (find-package '#:stumpwmrc))


;;; Configuring the prefix key

(defparameter +menu-key+
  #-freebsd "Menu"
  #+freebsd "XF86MenuKB"
  "Variable that contains the key designator for the \"menu key\".")

(defun menu-key (&optional control-string)
  "Helper to get variations of the menu key."
  (if control-string
      (kbd (format nil control-string +menu-key+))
      (kbd +menu-key+)))

;; Prefix key
(set-prefix-key (menu-key))

;; Use "Shift-menu" to send the prefix key (menu)
(define-key *top-map* (menu-key "S-~A") "send-escape")

;; Freeing the super key for more stuff
(undefine-key *top-map* (kbd "s-h"))
(undefine-key *top-map* (kbd "s-j"))
(undefine-key *top-map* (kbd "s-k"))
(undefine-key *top-map* (kbd "s-l"))
(undefine-key *top-map* (kbd "s-Right"))
(undefine-key *top-map* (kbd "s-Left"))
(undefine-key *top-map* (kbd "s-Up"))
(undefine-key *top-map* (kbd "s-Down"))
(undefine-key *top-map* (kbd "s-l"))
(undefine-key *top-map* (kbd "s-s"))
(undefine-key *top-map* (kbd "s-v"))
(undefine-key *top-map* (kbd "s-o"))
(undefine-key *top-map* (kbd "s-n"))
(undefine-key *top-map* (kbd "s-p"))

;; I don't want the default "Prefix-k" to close windows, it's too easy
;; to type by accident, and I want to use it for run-or-raise
;; keepassxc
(define-key *root-map* (kbd "M-F4") "delete")
(define-key *root-map* (kbd "K") "delete")
(define-key *root-map* (kbd "C-M-F4") "kill") ; â‰ˆ kill -9

(define-key *root-map* (kbd "k") nil)
(define-key stumpwm::*group-root-map* (kbd "k") nil)

;;(describe-key (list (kbd "Menu") (kbd "k")))


;;; Configuring behaviours

;; Make the focus follow the mouse.
;; (setf *mouse-focus-policy* :sloppy)
;; (setf *mouse-focus-policy* :ignore)
(setf *mouse-focus-policy* :click)

;; Don't jump between groups when switching apps
(setf *run-or-raise-all-groups* nil)

;; Don't bring windows from another screen into the current one
;; ^^^ NOT TESTED, I'm on my laptop ATM.
(setf *run-or-raise-all-screens* nil)

;; Stop stealing my damn focus!
;; Disabled because it was very clunky, I would need better
;; filter. (e.g. "raising" keepassxc would end up being denied...)
(setf *deny-raise-request* nil)
;; see also *suppress-deny-messages* and *deny-map-request*

;; TODO (push -new? '(:class "emacs") stumpwm:*deny-raise-request*)


;;; Loading other files

(defun load-config (name)
  (load (merge-pathnames (format nil "~A.lisp" name) *load-pathname*)))

(defun load-config* (&rest names)
  (mapcar #'load-config names))

(load-config* "utils"
              "mru"
              "defapplication"
              "audio"
              "aesthetic"
              "modeline"
              "swank"
              "rofi"
              "login"
              "teams")

(when (laptop-p)
  (load-config "laptop"))


;;; Common applications

(defapplication* firefox
  ;; TODO (:class (or "firefox" "Firefox"))
  (:class "Firefox")
  (:bind (:root "w"))
  (:bind (:top "s-w"))
  (:type new :bind (:root "W"))
  (:type windowlist :bind (:root "M-w")))

(defapplication* emacs
  (:bind (:root "e"))
  (:bind (:top "s-e"))
  (:type new :bind (:root "E"))
  (:type windowlist :bind (:root "M-e")))

(defapplication emacsclient :args "-c" :bind (:root "C-e"))

(defapplication* kitty
  (:bind (:root "t"))
  (:bind (:top "s-t"))
  (:class "kitty"))
(defapplication kitty :bind (:root "T") :type new)

;; (defapplication anki :class "Anki" :bind (:root "a"))
;;

(defcommand anki-run-or-raise () ()
  (run-or-raise "QT_XCB_GL_INTEGRATION=none anki" '(:class "Anki")))
(define-key *root-map* (kbd "a") "anki-run-or-raise")

(defapplication* code
  (:bind (:root "v"))
  (:type new :bind (:root "V"))
  (:type windowlist :bind (:root "M-v")))

;; hack to have some env var setup by fish
(defcommand code+shell () ()
  (run-commands "exec fish -c code"))

;; (defapplication nautilus :bind (:top "s-e"))
;; (defapplication nautilus :bind (:top "s-E") :type new)

;; (defapplication teams :class "teams")
(define-key *root-map* (kbd "ESC") "teams-run-or-raise")

(defapplication keepassxc
  :bind (:root "k"))

(defcommand zotero-run-or-raise () ()
  (run-or-raise "flatpak run org.zotero.Zotero" '(:class "Zotero")))
(define-key *root-map* (kbd "z") "zotero-run-or-raise")

;; "com.valvesoftware.Steam"

(defcommand steam-run-or-raise () ()
            (run-or-raise "flatpak run com.valvesoftware.Steam" '(:class "Steam")))

(defcommand quick () ()
  (run-shell-command "~/bin/myc quick"))

(define-key *root-map* (kbd "q") "quick")


;;; DWIM scripts

;; TODO Move those scripts into this repository
;; (define-key *root-map* (kbd "C-t") "exec ~/bin/dwim select-tmux")


;;; Key Bindings

;; Take a screenshot
(defcommand screenshot () ()
  (run-shell-command "flameshot gui"))
(define-key *top-map* (kbd "SunPrint_Screen") "screenshot")

;; Only on my laptop
(when (laptop-p)
  ;; Open an xterm window with the network-manager UI opened.
  (defcommand network-manager () ()
    (run-commands "exec xterm -e nmtui"))
  (define-key *root-map* (kbd "c") "network-manager"))

;; move windows around with the "super" key
(define-key *top-map* (kbd "s-S-Right") "move-window right")
(define-key *top-map* (kbd "s-S-Left") "move-window left")
(define-key *top-map* (kbd "s-S-Up") "move-window up")
(define-key *top-map* (kbd "s-S-Down") "move-window down")


(define-key *top-map* (kbd "M-Tab") "pull-hidden-next")
(define-key *top-map*
    (stumpwm::make-key :meta t :keysym (stumpwm::stumpwm-name->keysym "ISO_Left_Tab"))
  "pull-hidden-previous")


;;; Fixes

;; Fix issues with scrolling
(setf (getenv "GDK_CORE_DEVICE_EVENTS") "1")


;;; Start-up

;; Create a few groups
(mapcar #'gnewbg '("music" "workflow"))

;; on startup, open a terminal
(when *initializing*
  (ignore-errors
   (run-commands "kitty")))


;;; Done!

(message "~s loaded" *load-pathname*)
