;; -*- mode: lisp; -*-

(in-package #:stumpwm-user)

(message "Loading ~s" *load-pathname*)

;; Custom package, to now "interfere" with stumpwm's package.
(defpackage #:stumpwmrc
  (:use #:cl #:stumpwm))

;; Prefix key
(set-prefix-key (kbd "Menu"))
;; TODO use "Shift-menu" to send "menu"
;; (define-key *top-map* (kbd "C-Menu") "send-escape")

;; Run xrandr script if it exists
(let ((xrandr-script (merge-pathnames "xrandr" (user-homedir-pathname))))
  (when (probe-file xrandr-script))
  (run-shell-command (namestring xrandr-script)))

;; Make the focus follow the mouse.
(setf *mouse-focus-policy* :sloppy)

;; Don't jump between groups when switching apps
(setf *run-or-raise-all-groups* nil)

;; Don't bring windows from another screen into the current one
;; ^^^ NOT TESTED, I'm on my laptop ATM.
(setf *run-or-raise-all-screens* nil)

;; Change the color of the border around the focused window (default is white)
(set-focus-color "orange")

;; dmenu
(defcommand dmenu-run () ()
  (run-commands "exec bash -i -c dmenu_run"))
(define-key *top-map* (kbd "C-Menu") "dmenu-run")

;; FIXME *app-root-map* is not used
;; Applications
(defvar *app-root-map* (make-sparse-keymap))
(define-key *top-map* (kbd "S-Menu") *app-root-map*)

(defun load-config (name)
  (load (merge-pathnames (format nil "~A.lisp" name) *load-pathname*)))

(defun load-config* (&rest names)
  (mapcar #'load-config names))

(load-config* "utils"
              "defapplication"
              "audio"
              "laptop"
              "modeline")

;; Commonly used applications
(defapplication firefox :bind (:root "w"))
(defapplication firefox :bind (:root "W") :newp t)
(defapplication emacs :bind (:root "E") :newp t)
(defapplication alacritty :bind (:root "t"))
(defapplication alacritty :bind (:root "T") :newp t)
(defapplication anki :class "Anki" :bind (:root "a"))
(defapplication vlc :class "vlc" :bind (:root "v"))
(defapplication nautilus :bind (:top "s-e"))
(defapplication nautilus :bind (:top "s-E") :newp t)

;; Open an xterm window with the network-manager UI opened.
(defcommand network-manager () ()
  (run-commands "exec xterm -e nmtui"))
(define-key *root-map* (kbd "c") "network-manager")

;; Screen Lock
(defcommand lock () ()
  (run-commands "exec xlock"))
(define-key *top-map* (kbd "s-l") "lock")

;; Suspend
(defcommand suspend (confirmed-p)
  ((:y-or-n "About to suspend (without locking). U sure? "))
  (when confirmed-p
    (run-commands "exec systemctl suspend")))

;; Lock & Suspend
(defcommand lock-suspend (confirmed-p)
  ((:y-or-n "About to suspend (and lock). U sure? "))
  (when confirmed-p
    (run-commands
     "lock"
     "exec systemctl suspend")))

;; Shutdown
(defcommand shutdown (confirmed-p)
  ((:y-or-n "About to shutdown. U sure? "))
  (when confirmed-p
    (run-commands "exec systemctl poweroff")))

(defcommand reboot (confirmed-p)
  ((:y-or-n "About to reboot. U sure? "))
  (when confirmed-p
    (run-commands "exec systemctl reboot")))

;; move windows around with the "super" key
(define-key *top-map* (kbd "s-Right") "move-window right")
(define-key *top-map* (kbd "s-Left") "move-window left")
(define-key *top-map* (kbd "s-Up") "move-window up")
(define-key *top-map* (kbd "s-Down") "move-window down")

;; move the focus around with the "super" key
(define-key *top-map* (kbd "s-h") "move-focus left")
(define-key *top-map* (kbd "s-j") "move-focus down")
(define-key *top-map* (kbd "s-k") "move-focus up")
(define-key *top-map* (kbd "s-l") "move-focus right")

;; split and "maximize" windows with the "super" key
(define-key *top-map* (kbd "s-s") "vsplit")
(define-key *top-map* (kbd "s-v") "hsplit")
(define-key *top-map* (kbd "s-o") "only")

;; pull windows with the "super" key
(define-key *top-map* (kbd "s-n") "pull-hidden-next")
(define-key *top-map* (kbd "s-p") "pull-hidden-previous")
(define-key *top-map* (kbd "M-Tab") "pull-hidden-next")
(define-key *top-map*
    (stumpwm::make-key :meta t :keysym (stumpwm::stumpwm-name->keysym "ISO_Left_Tab"))
  "pull-hidden-previous")

;; Fix issues with scrolling
(setf (getenv "GDK_CORE_DEVICE_EVENTS") "1")

(defvar *swank-p* nil
  "Flag if swank is started or not")

(ignore-errors
  (load "~/.config/stumpwm/slime/swank-loader.lisp")
  (uiop:symbol-call :swank-loader :init)
  (defcommand swank
      (port) ((:number "Port: "))
      "Starts a swank server on port 4005 and notifies the user."
      (if *swank-p*
	  (message "Swank server already running.")
	  (progn
	    (uiop:symbol-call
	     :swank :create-server
	     :port port
	     ;; :style swank:*communication-style*
	     :dont-close t)
	    (setf *swank-p* t)
	    (echo-string
	     (current-screen)
	     "Starting swank. M-x slime-connect RET RET")))))

;; on startup, open a terminal with at terminal multiplexer
(ignore-errors
  (run-shell-command "alacritty --command tmux"))

(message "~s loaded" *load-pathname*)
